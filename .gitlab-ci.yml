stages:
  - build
  - test

include:
  - template: Security/Container-Scanning.gitlab-ci.yml
  - project: "khassel/buildkit"
    file: "/.buildkit.yml"

# todo: docker readme if readme changes on master
# todo: remove buildkit branch
# todo: change DOCKER_HUB_REPO

# image: ${CI_REGISTRY}/khassel/container/kaniko:latest

variables:
  GIT_DEPTH: 1
  MAGICMIRROR_VERSION: "v2.20.0"
  NODE_VERSION_MASTER: "16"
  NODE_VERSION_DEVELOP: "18"
  DEBIAN_VERSION: "bullseye" # except for arm still buster, see Dockerfile-debian
  GitRepo: "https://github.com/MichMich/MagicMirror.git"
  NO_IMAGE_REBUILD: "(master)"
  DOCKER_HUB_REPO: "karsten13/curl"

.rule:
  rules:
  - if: $TASK == "runtime"

.beforescript:
  before_script:
  - !reference [.docker_buildkit, before_script]
  - |
    #   export debug="true"
    # master or not
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      BuilderTag=${MAGICMIRROR_VERSION}
      export NODE_VERSION=${NODE_VERSION_MASTER}
    else
      BuilderTag=${CI_COMMIT_BRANCH}
      export NODE_VERSION=${NODE_VERSION_DEVELOP}
    fi
    export BUILDER_IMG_BASE="${CI_REGISTRY_IMAGE}:${BuilderTag}"
    export BUILDER_IMG="${BUILDER_IMG_BASE}_${imgarch}_artifacts"
    export GIT_INFO="commit=${CI_COMMIT_SHORT_SHA} ref=${CI_COMMIT_REF_NAME} date=${CI_COMMIT_TIMESTAMP} author=${CI_COMMIT_AUTHOR} title=${CI_COMMIT_TITLE}"

# build_artifacts:
#   extends:
#   - .docker_buildkit
#   - .beforescript
#   - .rule
#   variables:
#     DOCKERFILE_NAME: "Dockerfile-artifacts"
#   script:
#   - |
#     if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
#       echo "CI_COMMIT_BRANCH is master"
#       export BuildRef="${MAGICMIRROR_VERSION}"
#     else
#       echo "CI_COMMIT_BRANCH is not master"
#       export BuildRef="develop"
#     fi
#     export PUSH_IMAGES="${BUILDER_IMG}"
#     export BUILDKIT_ARGS="--opt build-arg:NODE_VERSION=$NODE_VERSION --opt build-arg:GIT_INFO=$GIT_INFO --opt build-arg:BuildRef=$BuildRef --opt build-arg:GitRepo=$GitRepo --opt build-arg:imgarch=$imgarch"
#   - set | grep -E "BUILDER_IMG=|NODE_VERSION=|BuildRef=|GitRepo="
#   - |
#     if [ $(echo "${CI_COMMIT_BRANCH}" | grep -E "$NO_IMAGE_REBUILD") ]; then
#       # only check here with skopeo
#       apk add skopeo
#       if [ "$(skopeo inspect docker://${BUILDER_IMG})" ]; then
#         echo "no builder image rebuild"
#         exit 0
#       fi
#     fi
#   - echo "builder image (re)build"
#   - !reference [.docker_buildkit, script]
#   parallel:
#     matrix:
#       - imgarch: ["amd64", "arm", "arm64", "debug"]

.runtime:
  variables:
    DOCKERFILE_NAME: "Dockerfile-debian"
  script:
  - |
    if [ -z "${SLIM}" ]; then
      export FAT="_fat"
      export DEFAULT_TAG="fat"
    else
      export DEFAULT_TAG="latest"
    fi
    if [ -z "${debug}" ]; then
      export NODE_ENV="production"
      export REGISTRY="docker"
      export REGISTRY_REPO="${DOCKER_HUB_REPO}"
    else
      export NODE_ENV="test"
      export REGISTRY="gitlab"
      export REGISTRY_REPO="${CI_REGISTRY_IMAGE}"
    fi
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      export PUSH_IMAGES="${REGISTRY_REPO}:${DEFAULT_TAG},${REGISTRY_REPO}:${MAGICMIRROR_VERSION}${FAT}"
    else
      export PUSH_IMAGES="${REGISTRY_REPO}:${CI_COMMIT_BRANCH}${FAT}"
    fi
    export BUILDKIT_ARGS="--opt build-arg:NODE_VERSION=$NODE_VERSION --opt build-arg:GIT_INFO=$GIT_INFO --opt build-arg:DEBIAN_VERSION=$DEBIAN_VERSION --opt build-arg:BUILDER_IMG_BASE=$BUILDER_IMG_BASE --opt build-arg:SLIM=$SLIM --opt build-arg:NODE_ENV=$NODE_ENV"
    set | grep -E "BUILDER_IMG_BASE=|NODE_VERSION=|FAT="
  - !reference [.docker_buildkit, script]
  extends: 
  - .docker_buildkit
  - .beforescript
  - .rule

build_slim:
  variables:
    SLIM: "-slim"
    # TARGETPLATFORM: "linux/amd64,linux/arm64,linux/arm"
  # needs: ["build_artifacts: [amd64]"]
  extends: .runtime

# build_amd64:
#   variables:
#     imgarch: "amd64"
#     SLIM: "-slim"
#   needs: ["build_artifacts: [amd64]"]
#   extends: .runtime

# build_amd64_fat:
#   variables:
#     imgarch: "amd64"
#   needs: ["build_artifacts: [amd64]"]
#   extends: .runtime

# build_arm:
#   variables:
#     imgarch: "arm"
#     SLIM: "-slim"
#   needs: ["build_artifacts: [arm]"]
#   extends: .runtime

# build_arm_fat:
#   variables:
#     imgarch: "arm"
#   needs: ["build_artifacts: [arm]"]
#   extends: .runtime

# build_arm64:
#   variables:
#     imgarch: "arm64"
#     SLIM: "-slim"
#   needs: ["build_artifacts: [arm64]"]
#   extends: .runtime

# build_arm64_fat:
#   variables:
#     imgarch: "arm64"
#   needs: ["build_artifacts: [arm64]"]
#   extends: .runtime

# build_debug:
#   variables:
#     imgarch: "debug"
#     debug: "true"
#     SLIM: "-slim"
#   needs: ["build_artifacts: [debug]"]
#   extends: .runtime

# build_alpine:
#   needs:
#   - "build_artifacts: [amd64]"
#   stage: build
#   extends: 
#   - .docker_buildkit
#   - .beforescript
#   - .rule
#   variables:
#     imgarch: "amd64"
#     DOCKERFILE_NAME: "Dockerfile-alpine"
#     REGISTRY: "docker"
#   script:
#   - |
#     set | grep -E "BUILDER_IMG=|NODE_VERSION="
#     if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
#       export PUSH_IMAGES="${DOCKER_HUB_REPO}:alpine"
#     else
#       export PUSH_IMAGES="${DOCKER_HUB_REPO}:${CI_COMMIT_BRANCH}_alpine"
#     fi
#     export BUILDKIT_ARGS="--opt build-arg:NODE_VERSION=$NODE_VERSION --opt build-arg:GIT_INFO=$GIT_INFO --opt build-arg:BUILDER_IMG=$BUILDER_IMG"
#   - !reference [.docker_buildkit, script]

# build_distroless:
#   variables:
#     imgarch: "amd64"
#   stage: build
#   script:
#   - |
#     docker.gitlab.login
#     export NODE_VERSION="16"
#     export BUILDER_IMG="${CI_REGISTRY_IMAGE}:develop_${imgarch}_artifacts"
#     set | grep -E "BUILDER_IMG=|NODE_VERSION="
#     build --context ./build \
#       --dockerfile Dockerfile-distroless \
#       --destination ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_distroless \
#       --build-arg NODE_VERSION=${NODE_VERSION} \
#       --build-arg BUILDER_IMG=${BUILDER_IMG}
#   rules:
#   - if: $TASK == "distroless"
#   after_script:
#     - docker.logout

# test_alpine:
#   stage: test
#   needs: ["build_alpine"]
#   variables:
#     GIT_STRATEGY: none
#   image: 
#     name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_alpine
#     entrypoint: [""]
#   script:
#   - |
#     cd /opt/magic_mirror
#     git log -1 > /tmp/image.txt
#     if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
#       echo "CI_COMMIT_BRANCH is master"
#       BuildRef="${MAGICMIRROR_VERSION}"
#     else
#       echo "CI_COMMIT_BRANCH is not master"
#       BuildRef="develop"
#     fi
#     cd /tmp
#     git clone --depth 1 -b "${BuildRef}" --single-branch "${GitRepo}" mm
#     cd mm
#     git log -1 > /tmp/clone.txt
#     cat /tmp/image.txt
#     echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
#     cat /tmp/clone.txt
#     echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
#     diff /tmp/image.txt /tmp/clone.txt
#     echo "no diffs detected."
#   extends: .rule

# # test raspi-image with gpio support and python
# build_gpio:
#   stage: build
#   variables:
#     imgarch: "arm"
#   script:
#   - |
#     docker.gitlab.login
#     build --context "./build" \
#       --dockerfile "Dockerfile-gpio" \
#       --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_gpio" \
#       --build-arg BASE_IMG="${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_arm"
#   rules:
#   - if: $TASK == "gpio"

# test_debug:
#   stage: test
#   needs: ["build_debug"]
#   variables:
#     GIT_STRATEGY: none
#     StartEnv: test
#   image: 
#     name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_debug
#     entrypoint: [""]
#   script:
#   - /opt/magic_mirror/entrypoint.sh
#   extends: .rule

snyk_amd64:
  stage: test
  image: 
    name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_debug
    entrypoint: [""]
  script:
  - sudo npm install -g snyk npm-check-updates
  - cd /opt/magic_mirror
  - ncu --deep
  - ncu --deep --target minor
  - snyk auth ${SNYK_TOKEN}
  - snyk test --all-projects
  rules:
  - if: $TASK == "snyk"

pages:
  stage: build
  needs: []
  image: ${CI_REGISTRY}/khassel/jekyll:latest
  script:
    - cp -v .gitlab-ci.yml ${CI_PROJECT_DIR}/pages/_data/gitlab.yml
    - uglify.sh ${CI_PROJECT_DIR}/pages/assets/js
    - cd pages
    - cp -v $HOME/Gemfile .
    - bundle exec jekyll build -d ${CI_PROJECT_DIR}/public
  artifacts:
    paths:
      - public
  rules:
  - if: ($CI_COMMIT_BRANCH == "master" && $TASK == "runtime") || ($TASK == "pages")

# see https://docs.gitlab.com/ee/user/application_security/container_scanning/
# see https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Security/Container-Scanning.gitlab-ci.yml
container_scanning:
  variables:
    DOCKER_IMAGE: karsten13/magicmirror:develop
    DOCKERFILE_PATH: build/Dockerfile-debian
    GIT_STRATEGY: fetch
  rules:
  - if: $TASK == "containerscan"

triage:
  # Links:
  # https://about.gitlab.com/handbook/marketing/strategic-marketing/getting-started/105/
  # https://medium.com/analytics-vidhya/gitlab-triage-bot-ba8afca4440a
  # https://gitlab.com/gitlab-org/ruby/gems/gitlab-triage/-/blob/master/README.md
  stage: test
  image: ruby:2.7
  script:
    - gem install gitlab-triage
    - gitlab-triage --dry-run --token $TRIAGE_API_TOKEN --source projects --source-id $CI_PROJECT_PATH
  rules:
  - if: $TASK == "triage"
